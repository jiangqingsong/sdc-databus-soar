package com.broadtech.databus.soar.service.impl;

import com.alibaba.fastjson.JSONObject;
import com.broadtech.databus.soar.common.HttpsUtil;
import com.broadtech.databus.soar.constans.TrxInterfaceConstant;
import com.broadtech.databus.soar.pojo.TrxVulnerJobStatus;
import com.broadtech.databus.soar.service.IVulnerabilityScanService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import java.util.HashMap;
import java.util.Map;

import static com.broadtech.databus.soar.constans.TrxInterfaceConstant.TASK_STATUS_MAP;

/**
 * @Author: leo.j
 * @desc:
 * @Date: 2022/4/28 10:30 上午
 */
@Service
public class VulnerabilityScanServiceImpl implements IVulnerabilityScanService {
    private static final Logger LOGGER = LoggerFactory.getLogger(VulnerabilityScanServiceImpl.class);

    @Override
    public String sysScan(String target, String username, String password) {
        return scheduleJob(1, target, username, password);
    }

    @Override
    public String webScan(String target, String username, String password) {
        return scheduleJob(2, target, username, password);
    }

    @Override
    public String crack(String target, String username, String password) {
        return scheduleJob(3, target, username, password);
    }


    /**
     * 执行任务
     *
     * @param taskType 1-系统漏洞扫描 2-WEB漏洞扫描 3-扣了猜解
     * @param target
     * @param username
     * @param password
     * @return
     */
    public static String scheduleJob(Integer taskType, String target, String username, String password) {
        String addJobBaseUrl = "";
        switch (taskType) {
            case 1:
                addJobBaseUrl = TrxInterfaceConstant.SYS_SCAN_ADD;
                break;
            case 2:
                addJobBaseUrl = TrxInterfaceConstant.WEB_SCAN_ADD;
                break;
            case 3:
                addJobBaseUrl = TrxInterfaceConstant.CRACK_ADD;
            default:
                break;
        }
        //1.添加任务
        //封装参数
        Map<String, Object> params = new HashMap<>();
        params.put("target", target);
        params.put("username", username);
        params.put("password", password);
        LOGGER.info("开始漏洞扫描，目标机器：{}", target);
        String url = addJobBaseUrl + "?&target=" + target + "&user=" + username + "&pwd=" + password;
        Map<String, Object> retMsg = HttpsUtil.doPost(url, params);
        String retStr = retMsg.get("httpStr").toString();
        JSONObject data = JSONObject.parseObject(retStr);
        Boolean success = data.getBoolean("success");
        Integer errorcode = data.getInteger("errorcode");
        if (!success) {
            LOGGER.warn("漏洞扫描任务添加失败: {}", TASK_STATUS_MAP.getOrDefault(errorcode, ""));
            return null;
        } else {
            //2.获取任务进度
            Integer jobId = data.getInteger("jobId");
            TrxVulnerJobStatus jobStatus = getJobStatus(jobId, username, password);
            String progress = jobStatus.getProgress();
            while (!"100%".equals(progress)) {
                try {
                    Thread.sleep(30 * 1000);
                } catch (InterruptedException e) {
                    LOGGER.error(e.getMessage());
                }
                TrxVulnerJobStatus jobStatus1 = getJobStatus(jobId, username, password);
                progress = jobStatus1.getProgress();
            }
            //3.获取漏扫结果
            String result = "";
            switch (taskType) {
                case 1:
                    result = queryResult("sysscan", jobId, username, password);
                    break;
                case 2:
                    result = queryResult("webscan", jobId, username, password);
                    break;
                case 3:
                    result = queryResult("crack", jobId, username, password);
                default:
                    break;
            }
            return result;
        }
    }

    /**
     * 查询系统漏洞扫描结果
     * @param jobId
     * @param username
     * @param password
     * @return
     */
    public static String queryResult(String urlKey, Integer jobId, String username, String password) {
        Map<String, Object> params = new HashMap<>();
        params.put("taskid", jobId);
        params.put("user", username);
        params.put("pwd", password);
        String url = "/async/" + urlKey + "/query?&taskid=" + jobId + "&user=" + username + "&pwd=" + password;
        Map<String, Object> retMsg = HttpsUtil.doPost(url, params);
        String retStr = retMsg.get("httpStr").toString();
        return retStr;
    }

    /**
     * 获取任务状态
     *
     * @param jobId
     * @param user
     * @param pwd
     * @return
     */
    public static TrxVulnerJobStatus getJobStatus(Integer jobId, String user, String pwd) {
        Map<String, Object> params = new HashMap<>();
        params.put("taskid", jobId);
        params.put("user", user);
        params.put("pwd", pwd);
        String url = "/async/status/?&taskid=" + jobId + "&user=" + user + "&pwd=" + pwd;
        Map<String, Object> retMsg = HttpsUtil.doPost(url, params);
        String retStr = retMsg.get("httpStr").toString();
        JSONObject data = JSONObject.parseObject(retStr);
        Boolean success = data.getBoolean("success");
        Integer status = data.getInteger("status");
        String progress = data.getString("progress");
        TrxVulnerJobStatus jobStatus = new TrxVulnerJobStatus(success, status, progress);
        return jobStatus;
    }


}
